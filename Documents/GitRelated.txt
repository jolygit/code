1. To copy repository from github (for example repository https://github.com/jolygit/test.git which is assumed to be created earlier on github.com) do the following:
   a. Create directory where it all goes for example by (joli:~ aj$ mkdir test in your home directory ) 
   b. Go to the directory you have just created (joli:~ aj$ cd test)  
   c. Initialize git by (joli:test aj$ git init)
   d. Add remote to just created git repository by (joli:test aj$ git remote add origin https://github.com/jolygit/test.git )
   e. Pull contents from remote repository i.e from https://github.com/jolygit/test.git to your local directory by (joli:test aj$ git pull origin master)
That is it!
2. To commit your changes to your local repository do (joli:test aj$ git commit -m "added few lines to test.txt" test.txt ) this assumes that test.txt is already in the repository and you want to commit it after have edited few lines.
3. To send your changes to remote repository do (joli:test aj$ git push  origin master) you will be asked user name which is jolygit and pswd which is aleko123
4. To get latest from remote repo to your local branch do (joli:test aj$ git pull  origin master)
5. To update your origin/master from remote origin/master do (joli:test aj$ git fetch) this leaves your local master branch unchanged and now you can see the differances between what has been added to remote orignin/master and your local master branch by (joli:test aj$ git diff  origin/master master)

6. To create repository at dreamsculpture.org do:
   a. Log into the server called sonacharlie from for example local machine aj by (joli:test aj$ ssh sonacharlie@dreamsculpture.org) enter pwd which is mewithCapletter!!andusualnumbers
   b. Create directory where repo will be (sonacharlie@a2plcpnl0012 [~]$ mkdir git) and go to that dir (sonacharlie@a2plcpnl0012 [~]$ cp git)
   c. Do (sonacharlie@a2plcpnl0012 [git]$ git init --bare) now remote is at sonacharlie@dreamsculpture.org:/home/sonacharlie/git 
   d. On your local computer create directory where git will reside (mkdir dream) and go there (cd dream)
   e. Create git by (joli:dream aj$ git init) 
   f. Add file to it for exampe by (joli:dream aj$ git add .) and commit it (joli:dream aj$ git commit -m "first commit" )
   g. Link remote git (on the server sonacharlie@dreamsculpture.org:/home/sonacharlie/git) to local git in dream dir on your machine by (git remote add origin sonacharlie@dreamsculpture.org:/home/sonacharlie/git)
   h. Now you are ready to push your first commit to the remote by (joli:dream aj$ git push origin master) when asked for pswd enter same as in a.
   k. You can read also https://git-scm.com/book/en/v2/Git-on-the-Server-Setting-Up-the-Server

------------------------------

Git commands:

1. git checkout --orphan NEWBRANCHName ; to create new branch from scratch
2. git branch -a ; to list all the branches
3. git checkout brName ; to move to brName
4. git remote -v ; to see all the remotes and links to web
5. git remote add pb https://github.com/paulboone/ticgitv ; to add remote to the local repo
6. git diff master origin/master ; to see the difference from origin/master, useful after fetch before merge
7. git remote rm remName ; to remove the remote
s8. git stash; to put local uncommitted chages on stack and make the branch clean
9. git stash apply ; to bring stashed changes back
10. git stash apply stash@{number} ; to bring back stashed stuff from number stashes before. Note that latest stash is number 0 
11. git stash list ; show the list of stashes
12. git clean -d -f ; removes all the changes and all the untracked files git stash --all does the same but stashing it first
13. git clean -d -n ; to show what would happened without actually deleting anyting
14. git merge origin/master ; to merge origin/master with master branch
15. git status -u no ; supress untracked files
16. git config --list ; to list git config entries
17. git config --global user.name "Alex Joly" ; to set up a user name
18. git clone https://github.com/jolygit/code.git ; clones my code to the code dir 
19 ~/.gitconfig /etc/gitconfig ~/.config/git/config  or .git/config in your dir are the config files for git
20. man git-commit ; to show the man page on a commit for example
21. Git working tree consists of files that you are currently working on.
22. Git index is the staging area that actually gets commited. see for pictures https://backlogtool.com/git-guide/en/intro/intro1_4.html and https://www.google.com/imgres?imgurl=http://i.stack.imgur.com/caci5.png&imgrefurl=http://stackoverflow.com/questions/3689838/difference-between-head-working-tree-index-in-git&h=455&w=481&tbnid=0DKH6b5EpHVM6M:&tbnh=160&tbnw=169&docid=RzTHKDRnZs3TtM&usg=__KbB8eM19cBvatGC51XTTBQxe5vs=&sa=X&ved=0ahUKEwjfxo7nk6PKAhVGFR4KHfbjB4oQ9QEIIDAA 

23. git rm --cached <fileName> ; to remove file from the index but to leave it alone in the working tree, this way you can commit deleted file to repo while keeping it in your local working tree. Without --cached it will remove from working tree as well
24. git pull origin master ; to pull from remote named origin and branch called master
25. git reset --soft [commit] ;resets the head of the branch to the commit (default is head) without changing index or the tree.
25. git reset ; resets the index but not the working tree this is useful when you need to pull from remote while having some files added and the following is important you have made commits to the local repo. Because when you have commits on your local repo and you pull at merging stage new commit will be created which will include the added files as well as a side effect. To avaid the side effect merge will fail. On the other had if you have no commits from last pull or merge but your tree and or the index is dirty with files not affected by the merge then pull or merge will succeed and the dirty files in tree and index, will stay that way. Finally if the same file is dirty localy and changed remotely pull/merge will fail.
26. git reset --hard [commit] ; resets index and the working tree all uncommited changes are lost; In order to fast forward you have to know the SHA1 ID and then you can git reset --soft <sha1 key>
27. git merge
27. git reset --soft HEAD@{1} ; to go where head use to be before where it is now. git reflog ;prints the log of past head states.
