import javafx.util.Pair;

import java.awt.*;
import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;
class pair implements Comparable<pair>{
    pair(int _x,int _y){
        x=_x;
        y=_y;
    }
    @Override
    public int compareTo(pair other){
        if(x<other.x){
            return -1;
        }
        else if(x>other.x){
            return 1;
        }
        else {
            return 0;
        }
    }
    public int x;
    public int  y;
}

public class Solution {
    static class FastReader
    {
        BufferedReader br;
        StringTokenizer st;

        public FastReader() throws FileNotFoundException {
             InputStream inputStream       = new FileInputStream("c:/Users/alex/code/HackerRank/JavaCode/input.txt");
            br = new BufferedReader(new
                    InputStreamReader(inputStream));
        }

        String next()
        {
            while (st == null || !st.hasMoreElements())
            {
                try
                {
                    st = new StringTokenizer(br.readLine());
                }
                catch (IOException  e)
                {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }

        int nextInt()
        {
            return Integer.parseInt(next());
        }

        long nextLong()
        {
            return Long.parseLong(next());
        }

        double nextDouble()
        {
            return Double.parseDouble(next());
        }

        String nextLine()
        {
            String str = "";
            try
            {
                str = br.readLine();
            }
            catch (IOException e)
            {
                e.printStackTrace();
            }
            return str;
        }
    }
    public static void main(String[] args) throws FileNotFoundException{
        //Scanner in = new Scanner(System.in);
        int[] a=new int[4];
        a[0]=1;
        a[1]=2;
        a[2]=4;
        a[3]=6;
        int[] m=new int[4];
        m[0]=3;
        m[1]=3;
        m[2]=3;
        m[3]=4;
        int[] q=connectedCities(6,1,a,m);
    }
    static int gcd(int a, int b)
    {
        if(a == 0 || b == 0) return a+b; // base case
        return gcd(b,a%b);
    }
    static int[] connectedCities(int n, int g, int[] originCities, int[] destinationCities) {
        ArrayList<HashSet<Integer>> edges=new ArrayList<>();
        for(int n1=0;n1<n;n1++) {
            HashSet<Integer> st = new HashSet<>();
            edges.add(st);
        }
        for(int n1=0;n1<n;n1++){
            HashSet<Integer> st1=edges.get(n1);
            for(int n2=n1+1;n2<n;n2++){
                int w=0;
                if(gcd(n1+1,n2+1)>g){
                    st1.add(n2);
                    edges.get(n2).add(n1);
                }
            }
        }
        int[] q=new int[originCities.length];
        for(int i=0;i<originCities.length;i++){
            int or=originCities[i]-1;
            int dst=destinationCities[i]-1;
            int[] parents=new int[n];
            for(int j=0;j<n;j++){
                parents[j]=-1;
            }
            bfs(or,parents,edges);
            if(parents[dst]!=-1){
                q[i]=1;
            }
            else {
                q[i]=0;
            }
        }
        return q;
    }
    private static void bfs(int root,int[] parents,ArrayList<HashSet<Integer>> edges){
        Set<Integer> set=new HashSet<>();
        Deque<Integer> deque=new ArrayDeque<>();
        deque.add(root);
        set.add(root);
        parents[root]=-1;
        while(!deque.isEmpty()){
            int nd=deque.removeFirst();
            HashSet<Integer> lst=edges.get(nd);
            for(int neib:lst){
                if( !set.contains(neib)) {
                    deque.add(neib);
                    set.add(neib);
                    parents[neib]=nd;
                }
            }
        }
    }

}
