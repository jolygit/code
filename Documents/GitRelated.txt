1. To copy repository from github (for example repository https://github.com/jolygit/test.git which is assumed to be created earlier on github.com) do the following:
   a. Create directory where it all goes for example by (joli:~ aj$ mkdir test in your home directory ) 
   b. Go to the directory you have just created (joli:~ aj$ cd test)  
   c. Initialize git by (joli:test aj$ git init)
   d. Add remote to just created git repository by (joli:test aj$ git remote add origin https://github.com/jolygit/test.git )
   e. Pull contents from remote repository i.e from https://github.com/jolygit/test.git to your local directory by (joli:test aj$ git pull origin master)
That is it!
2. To commit your changes to your local repository do (joli:test aj$ git commit -m "added few lines to test.txt" test.txt ) this assumes that test.txt is already in the repository and you want to commit it after have edited few lines.
3. To send your changes to remote repository do (joli:test aj$ git push  origin master) you will be asked user name which is jolygit and pswd which is aleko123
4. To get latest from remote repo to your local branch do (joli:test aj$ git pull  origin master)
5. To update your origin/master from remote origin/master do (joli:test aj$ git fetch) this leaves your local master branch unchanged and now you can see the differances between what has been added to remote orignin/master and your local master branch by (joli:test aj$ git diff  origin/master master)

6. To create repository at dreamsculpture.org do:
   a. Log into the server called sonacharlie from for example local machine aj by (joli:test aj$ ssh sonacharlie@dreamsculpture.org) enter pwd which is mewithCapletter!!andusualnumbers
   b. Create directory where repo will be (sonacharlie@a2plcpnl0012 [~]$ mkdir git) and go to that dir (sonacharlie@a2plcpnl0012 [~]$ cp git)
   c. Do (sonacharlie@a2plcpnl0012 [git]$ git init --bare) now remote is at sonacharlie@dreamsculpture.org:/home/sonacharlie/git 
   d. On your local computer create directory where git will reside (mkdir dream) and go there (cd dream)
   e. Create git by (joli:dream aj$ git init) 
   f. Add file to it for exampe by (joli:dream aj$ git add .) and commit it (joli:dream aj$ git commit -m "first commit" )
   g. Link remote git (on the server sonacharlie@dreamsculpture.org:/home/sonacharlie/git) to local git in dream dir on your machine by (git remote add origin sonacharlie@dreamsculpture.org:/home/sonacharlie/git)
   h. Now you are ready to push your first commit to the remote by (joli:dream aj$ git push origin master) when asked for pswd enter same as in a.
   k. You can read also https://git-scm.com/book/en/v2/Git-on-the-Server-Setting-Up-the-Server

------------------------------

Git commands:

1. git checkout --orphan NEWBRANCHName ; to create new branch from scratch
2. git branch -a ; to list all the branches
3. git checkout brName ; to move to brName
4. git remote -v ; to see all the remotes and links to web
5. git remote add pb https://github.com/paulboone/ticgitv ; to add remote to the local repo
6. git diff master origin/master ; to see the difference from origin/master, useful after fetch before merge
7. git remote rm remName ; to remove the remote
s8. git stash; to put local uncommitted chages on stack and make the branch clean
9. git stash apply ; to bring stashed changes back
10. git stash apply stash@{number} ; to bring back stashed stuff from number stashes before. Note that latest stash is number 0 
11. git stash list ; show the list of stashes
12. git clean -d -f ; removes all the changes and all the untracked files git stash --all does the same but stashing it first
13. git clean -d -n ; to show what would happened without actually deleting anyting
14. git merge origin/master ; to merge origin/master with master branch
15. git status -u no ; supress untracked files
16. git config --list ; to list git config entries
17. git config --global user.name "Alex Joly" ; to set up a user name
18. git clone https://github.com/jolygit/code.git ; clones my code to the code dir 
19 ~/.gitconfig /etc/gitconfig ~/.config/git/config  or .git/config in your dir are the config files for git
20. man git-commit ; to show the man page on a commit for example
21. Git working tree consists of files that you are currently working on.
22. Git index is the staging area that actually gets commited. see for pictures https://backlogtool.com/git-guide/en/intro/intro1_4.html and https://www.google.com/imgres?imgurl=http://i.stack.imgur.com/caci5.png&imgrefurl=http://stackoverflow.com/questions/3689838/difference-between-head-working-tree-index-in-git&h=455&w=481&tbnid=0DKH6b5EpHVM6M:&tbnh=160&tbnw=169&docid=RzTHKDRnZs3TtM&usg=__KbB8eM19cBvatGC51XTTBQxe5vs=&sa=X&ved=0ahUKEwjfxo7nk6PKAhVGFR4KHfbjB4oQ9QEIIDAA 

23. git rm --cached <fileName> ; to remove file from the index but to leave it alone in the working tree, this way you can commit deleted file to repo while keeping it in your local working tree. Without --cached it will remove from working tree as well
24. git pull origin master ; to pull from remote named origin and branch called master
25. git reset --soft [commit] ;resets the head of the branch to the commit (default is head) without changing index or the tree.
25. git reset ; resets the index but not the working tree this is useful when you need to pull from remote while having some files added and the following is important you have made commits to the local repo. Because when you have commits on your local repo and you pull at merging stage new commit will be created which will include the added files as well as a side effect. To avaid the side effect merge will fail. On the other had if you have no commits from last pull or merge but your tree and or the index is dirty with files not affected by the merge then pull or merge will succeed and the dirty files in tree and index, will stay that way. Finally if the same file is dirty localy and changed remotely pull/merge will fail.
26. git reset --hard [commit] ; resets index and the working tree all uncommited changes are lost; In order to fast forward you have to know the SHA1 ID and then you can git reset --soft <sha1 key>
27. git reset --soft HEAD@{1} ; to go where head use to be before where it is now. git reflog prints the log of past head states. --soft does not change workign tree or the index. use --hard to do so. You can use this command to toggle between two states.
28. Undo a commit and redo

               $ git commit ...
               $ git reset --soft HEAD^      (1)
               $ edit                        (2)
               $ git commit -a -c ORIG_HEAD  (3)
29. git reset --hard HEAD~3 ; remove 3 commits permanently
30. git reset --merge ORIG_HEAD; Undo a merge or pull inside a dirty working tree. Even if you may have local modifications in your working tree, you can safely say "git pull" when you know that the change in the other branch does not overlap with them. After inspecting the result of the merge, you may find that the change in the other branch is unsatisfactory. Running "git reset --hard ORIG_HEAD" will let you go back to where you were, but it will discard your local changes, which you do not want. "git reset --merge" keeps your local changes.
31. git reset -- fname; remove singele file from index.
32. git reset --keep <commit>; reset index and working tree to <commit>. If file that is reset has dirty work tree rest is aborted.
       "reset --keep" is meant to be used when removing some of the last
       commits in the current branch while keeping changes in the working
       tree. If there could be conflicts between the changes in the commit we
       want to remove and the changes in the working tree we want to keep, the
       reset is disallowed. That's why it is disallowed if there are both
       changes between the working tree and HEAD, and between HEAD and the
       target. To be safe, it is also disallowed when there are unmerged
       entries.
32a. git reset --merge <commit>; reset index and working tree to <commit>, but keep those that have dirty tree i.e unstaged changes. Keep in mind that the dirty file have to have no difference between head and commit that it goes to, otherwise reset is aborted. 
       "reset --merge" is meant to be used when resetting out of a conflicted
       merge. Any mergy operation guarantees that the working tree file that
       is involved in the merge does not have local change wrt the index
       before it starts, and that it writes the result out to the working
       tree. So if we see some difference between the index and the target and
       also between the index and the working tree, then it means that we are
       not resetting out from a state that a mergy operation left after
       failing with a conflict. That is why we disallow --merge option in this
       case.
33. git log --pretty=oneline ; to show the list of past commits
34. git tag -a <tagname> <commit>
35. git tag ; list tags
36. git checkout -b [branchname] [tagname] ; to start a new branch from the tag
37. git push origin tagname ; to push tag 
38. git push origin --tags
39. git merge -s recursive -Xours origin/master ; to merge with origin/master and choose automaticaly our changes when there are conflicts.
40. git merge -s recursive -Xtheirs origin/master ; to merge with origin/master and choose automaticaly thier changes when there are conflicts.
41. git branch -D <branch name> ; to delete branch 
42. git ls-remote; show remote branches
43. git checkout -b serverfix origin/serverfix; to start a local branch from thepoint where origin/severfix is now.
44.git checkout --track origin/serverfix ;
Branch serverfix set up to track remote branch serverfix from origin.
Switched to a new branch 'serverfix'
45. git branch -u origin/serverfix ; Branch serverfix set up to track remote branch serverfix from origin.
46.git merge @{u} is the same as git merge origin/master
47. git branch -vv ; to see what remotes are being tracked by local branches
48. git push origin --delete <brname> ; to delete a branch called brname on server
49. git rebase master ; assumig you are on exp branch you can in a way merge with master but in sequantial way, not parallel like merge would do.
50. git diff master...contrib ; This command shows you only the work your current topic branch has introduced since its common ancestor with master. That is a very useful syntax to remember.
51. git cherry-pick <sha1Id> ; this is basically brings one particular commit with sha1Id to the current branch. It is like git rebase for just one commit.
52. git log --pretty=format:'%h %s' --graph ; to show the tree
53. git show d921970^2 ; show the second parent of the d921970 key. This is useful when d921970 is a merge commit, because it will have several parents in that case.
54. git show HEAD~3; this is the grand grand parant on the main branch. I.e this goes back on the current branch HEAD^^^ is the same. HEAD~3^2  gets you the second parent of the previous reference (assuming it was a merge commit)
55. git log master..experiment ; all commits reachable by experiment that aren’t reachable by master
56. git log remotes/origin/master..HEAD ; to see the commits that will be added to remote
57. git log refA refB ^refC ; to see the commits that are reachable from refA or refB but not from refC. same as git log refA refB --not refC
58. git log --left-right master...experiment ; this shows the commits that are reachable from either master or experiment but not both.
59. git stash --keep-index ; to stash the tree but leave the index
60. git stash -u ; to stash untracked files allong the way
61. git stash branch <brName> ; to start a new branch from the commit that the stash took place. This is useful if you have made changes to the brach after stashing. This avoids potential conflicts
62. git grep --count <word> ; to summarize the output by just showing you which files matched <word> and how many matches there were in each file 
63. git grep --break --heading     -n -e '22' --and  \( -e '.' -e 'git' \) tagtest ; to search commit taged with tagtest, for lines that contain 22 and . or git. 
64. git log -S "string you want to search" --oneline ; Look for differences that introduce or remove an instance of "string you want to search"
65. git grep -l --all-match -e frotz -e nitfol;
will give the names of the files that have both frotz and nitfol somewhere in them. The matches do not have to be on the same line; they can be anywhere in the same file.
66. git log --all-match --grep=frotz --author=Linus;
This will show commits that mention frotz and written by Linus.
67. git log --grep=^#[1-5].$ ; grep regexp of the commit log.
68. git checkout HEAD~1 ; go to the previous commit i.e all the tree is rest to previous commit, now head is detached. To go back say git checkout master.
69. git checkout <commit> <filename>; only reset given file to commit. 
70. git revert  master~3..master~2 ; to revert a range of commits.
71. git revert -m 1 HEAD ; to revert the merge and keep the changes introduced by the first parent, usualy the master.
72. git diff HEAD HEAD~; to see the diff for two commits
73. git blame -L startLine:EndLine <filename> ; To see all the changes introduced to a given file for a given line range.
